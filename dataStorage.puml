@startuml
'https://plantuml.com/class-diagram

class TableManager {
  IncrementalVersionedValue<Map<Integer, TableImpl>> tableByIdVv
}

class TableImpl {
  InternalTable tbl
}

class InternalTableImpl {
  MvTableStorage tableStorage
  TxStateTableStorage txStateStorage
}

interface MvTableStorage {
  MvPartitionStorage createMvPartition()
  MvPartitionStorage getMvPartition(int partitionId)
  boolean isVolatile()
  void destroy()
  clearPartition(int partitionId)
}

class PersistentPageMemoryTableStorage {}
class RocksDbTableStorage {
  RocksDB db
}
class VolatilePageMemoryTableStorage {}

class RocksDB {

}

interface TxStateTableStorage {
  AtomicReferenceArray<TxStateRocksDbStorage> storages
  TxStateStorage getOrCreateTxStateStorage(int partitionId)
  TxStateStorage getTxStateStorage(int partitionId)
  void destroyTxStateStorage(int partitionId)
  void destroy()
}

interface TxStateStorage {
  TxMeta get(UUID txId)
  void put(UUID txId, TxMeta txMeta)
  boolean compareAndSet(UUID txId, @Nullable TxState txStateExpected, TxMeta txMeta, long commandIndex, long commandTerm)
  void remove(UUID txId)
  Cursor<IgniteBiTuple<UUID, TxMeta>> scan()
  CompletableFuture<Void> flush()
  long lastAppliedIndex()
  long lastAppliedTerm()
  void lastApplied(long lastAppliedIndex, long lastAppliedTerm)
  long persistedIndex()
  void close()
  void _destroy()
}

class TxStateRocksDbStorage {
}

class TxMeta {
  TxState txState
  List<TablePartitionId> enlistedPartitions
  HybridTimestamp commitTimestamp
}

enum TxState {
  ABORTED
  COMMITED
}

interface MvPartitionStorage {
  <V> V runConsistently(WriteClosure<V> closure)
  void flush()
  long lastAppliedIndex()
  long lastAppliedTerm()
  void lastApplied(long lastAppliedIndex, long lastAppliedTerm)
  long persistedIndex()
  byte[] committedGroupConfiguration()
  void committedGroupConfiguration(byte[] config)
  ReadResult read(RowId rowId, HybridTimestamp timestamp)
  BinaryRow addWrite(RowId rowId, @Nullable BinaryRow row, UUID txId, int commitTableId, int commitPartitionId)
  BinaryRow abortWrite(RowId rowId)
  void commitWrite(RowId rowId, HybridTimestamp timestamp)
  void addWriteCommitted(RowId rowId, @Nullable BinaryRow row, HybridTimestamp commitTimestamp)
  Cursor<ReadResult> scanVersions(RowId rowId)
  PartitionTimestampCursor scan(HybridTimestamp timestamp)
  RowId closestRowId(RowId lowerBound)
  GcEntry peek(HybridTimestamp lowWatermark)
  BinaryRow vacuum(GcEntry entry)
}

class PersistentPageMemoryMvPartitionStorage {}
class VolatilePageMemoryMvPartitionStorage {}
class RocksDbMvPartitionStorage {
  RocksDbTableStorage tableStorage
}

interface ReplicaListener {
    CompletableFuture<?> invoke(ReplicaRequest request)
    void onBecomePrimary(ClusterNode clusterNode)
    void onShutdown()
}

class PartitionReplicaListener {
  MvPartitionStorage mvDataStorage
  TxStateStorage txStateStorage
  MvTableStorage tableStorage
}

class ReplicaManager {
  ConcurrentHashMap<ReplicationGroupId, CompletableFuture<Replica>> replicas
}

class Replica {
  ReplicaListener listener
}

interface RaftGroupListener {
    void onRead(Iterator<CommandClosure<ReadCommand>> iterator)
    void onWrite(Iterator<CommandClosure<WriteCommand>> iterator)
    void onConfigurationCommitted(CommittedConfiguration config)
    void onSnapshotSave(Path path, Consumer<Throwable> doneClo)
    boolean onSnapshotLoad(Path path)
    void onShutdown()
    void onBeforeApply(Command command)
}

class CmgRaftGroupListener {}
class MetaStorageListener {}
class PartitionListener {
  StorageUpdateHandler storageUpdateHandle
  TxStateStorage txStateStorage
}

class StorageUpdateHandler {
  PartitionDataStorage _storage
  IndexUpdateHandler indexUpdateHandler
}

class RaftGroupService {
  NodeOptions nodeOptions
}

class NodeOptions {
  StateMachine fsm
  JraftGroupEventsListener raftGrpEvtsLsnr
}

interface RaftServer {}

class JraftServerImpl {
  ConcurrentMap<RaftNodeId, RaftGroupService> nodes
  NodeOptions opts
}

class Loza {
  RaftServer raftServer
  NodeOptions opts
}

interface PartitionDataStorage {
  <V> V runConsistently(WriteClosure<V> closure)
  void acquirePartitionSnapshotsReadLock()
  void releasePartitionSnapshotsReadLock()
  CompletableFuture<Void> flush()
  long lastAppliedIndex()
  long lastAppliedTerm()
  void lastApplied(long lastAppliedIndex, long lastAppliedTerm)
  void committedGroupConfiguration(RaftGroupConfiguration config)
  BinaryRow addWrite(RowId rowId, @Nullable BinaryRow row, UUID txId, int commitTableId, int commitPartitionId)
  BinaryRow abortWrite(RowId rowId)
  void commitWrite(RowId rowId, HybridTimestamp timestamp)
  Cursor<ReadResult> scanVersions(RowId rowId)
  void close()
  PartitionTimestampCursor scan(HybridTimestamp timestamp)
  GcEntry peek(HybridTimestamp lowWatermark)
  BinaryRow vacuum(GcEntry entry)
}

class SnapshotAwarePartitionDataStorage {
  MvPartitionStorage partitionStorage
  PartitionsSnapshots partitionsSnapshots
}

interface PartitionsSnapshots {
  PartitionSnapshots partitionSnapshots(PartitionKey partitionKey)
  void removeSnapshots(PartitionKey partitionKey)
  void finishOutgoingSnapshot(UUID snapshotId)
}

class OutgoingSnapshotsManager {
  Map<UUID, OutgoingSnapshot> snapshots
  Map<PartitionKey, PartitionSnapshotsImpl> snapshotsByPartition
}

class OutgoingSnapshot {
  PartitionAccess _partition
  UUID id() {
  PartitionKey partitionKey() {
  void freezeScopeUnderMvLock() {
  SnapshotMeta meta() {
  SnapshotMetaResponse handleSnapshotMetaRequest(SnapshotMetaRequest request) {
  SnapshotMvDataResponse handleSnapshotMvDataRequest(SnapshotMvDataRequest request) {
  SnapshotTxDataResponse handleSnapshotTxDataRequest(SnapshotTxDataRequest request) {
  void acquireMvLock() {
  void releaseMvLock() {
  boolean addRowIdToSkip(RowId rowId) {
  boolean alreadyPassed(RowId rowId) {
  void enqueueForSending(RowId rowId) {
  void close() {
}

interface PartitionAccess {
  PartitionKey partitionKey()
  Cursor<IgniteBiTuple<UUID, TxMeta>> getAllTxMeta()
  void addTxMeta(UUID txId, TxMeta txMeta)
  RowId closestRowId(RowId lowerBound)
  List<ReadResult> getAllRowVersions(RowId rowId) throws StorageException
  RaftGroupConfiguration committedGroupConfiguration()
  void addWrite(RowId rowId, @Nullable BinaryRow row, UUID txId, int commitTableId, int commitPartitionId)
  void addWriteCommitted(RowId rowId, @Nullable BinaryRow row, HybridTimestamp commitTimestamp)
  long minLastAppliedIndex()
  long minLastAppliedTerm()
  long maxLastAppliedIndex()
  long maxLastAppliedTerm()
}

class PartitionAccessImpl {
  PartitionKey partitionKey
  MvTableStorage mvTableStorage
  TxStateTableStorage txStateTableStorage
}

class PartitionKey {
  int tableId
  int partitionId
}



TableManager *-- TableImpl : tableByIdVv
TableImpl *-- InternalTableImpl : tbl

InternalTableImpl *-- MvTableStorage : tableStorage
InternalTableImpl *-- TxStateTableStorage : txStateStorage

MvTableStorage *-- MvPartitionStorage
MvPartitionStorage ..> MvTableStorage : connected not interfaces, but implementations

VolatilePageMemoryTableStorage ..|> MvTableStorage
RocksDbTableStorage ..|> MvTableStorage
PersistentPageMemoryTableStorage ..|> MvTableStorage

PartitionReplicaListener ..> MvPartitionStorage
PartitionReplicaListener ..> TxStateStorage
PartitionReplicaListener ..> MvTableStorage

TxStateTableStorage *-- TxStateStorage : connected implementations actually
TxStateRocksDbStorage ..|> TxStateStorage

ReplicaManager *-- Replica

Replica *-- ReplicaListener
PartitionReplicaListener ..|> ReplicaListener

CmgRaftGroupListener ..|> RaftGroupListener
MetaStorageListener ..|> RaftGroupListener
PartitionListener ..|> RaftGroupListener

RaftGroupService  *-- NodeOptions
NodeOptions  *-- RaftGroupListener : through delegate fsm

JraftServerImpl ..|> RaftServer
JraftServerImpl *-- RaftGroupService : nodes

Loza *-- RaftServer

SnapshotAwarePartitionDataStorage ..|> PartitionDataStorage

PartitionListener *-- PartitionDataStorage

' need to understand the real lifecycle of StorageUpdateHandler
PartitionListener ..> StorageUpdateHandler
PartitionListener ..> TxStateStorage

StorageUpdateHandler ..> PartitionDataStorage

RocksDbMvPartitionStorage ..|> MvPartitionStorage
PersistentPageMemoryMvPartitionStorage ..|> MvPartitionStorage
VolatilePageMemoryMvPartitionStorage ..|> MvPartitionStorage

SnapshotAwarePartitionDataStorage ..> MvPartitionStorage
SnapshotAwarePartitionDataStorage ..> PartitionsSnapshots

OutgoingSnapshotsManager ..|> PartitionsSnapshots
OutgoingSnapshotsManager *-- OutgoingSnapshot
OutgoingSnapshot ..> PartitionAccess

PartitionAccessImpl ..|> PartitionAccess

PartitionAccessImpl *-- PartitionKey
PartitionAccessImpl ..> MvTableStorage
PartitionAccessImpl ..> TxStateTableStorage

TxStateStorage ..> TxMeta
TxMeta *-- TxState

RocksDbTableStorage *-- RocksDB

@enduml
